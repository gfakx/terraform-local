pipeline {
    agent any
    
    tools {
        terraform 'localTerraform'
    }

    environment {
        AWS_DEFAULT_REGION = "${params.region}"
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    parameters {
        string(name: 'region', defaultValue: 'us-east-1', description: 'AWS region to use')
        string(name: 'environment', defaultValue: 'development', description: 'Workspace/environment file to use for deployment')
    }

    stages {
        stage('Install Checkov') {
            steps {
                sh 'sudo apt-get update'
                sh 'sudo apt-get install -y python3 python3-pip' // use appropriate command for your Linux distribution
                sh 'sudo pip3 install checkov'
            }
        }

        stage('Git Checkout') {
            steps {
                echo 'Cloning the application code...'
                git branch: 'main', url: 'https://github.com/gfakx/terraform-local.git'
                sh 'ls -l'
            }
        }
        stage('format') {
            steps {
                sh 'terraform fmt'
            }
        }
        stage('validate') {
            steps {
                sh 'terraform init'
                sh 'terraform validate'
            }
        }

        stage('Checkov') {
            steps {
                sh 'checkov -d .. --skip-check CKV_AWS_79,CKV_AWS_8,CKV_AWS_28,CKV_AWS_119,CKV2_AWS_62,CKV2_AWS_6,CKV2_AWS_41,CKV2_AWS_61,CKV_AWS_18,CKV_AWS_145,CKV2_AWS_12,CKV2_AWS_11,CKV2_AWS_16,CKV_AWS_144,CKV_AWS_135,CKV_AWS_126'
            }
        }

        stage('plan') {
            steps {
                sh 'terraform init'
                sh 'terraform workspace select ${environment} || terraform workspace new ${environment}'
                sh 'terraform plan -out=tfplan'
                stash includes: 'tfplan', name: 'terraform-plan'
            }
            post {
                success {
                    archiveArtifacts artifacts: 'tfplan', onlyIfSuccessful: true
                }
            }
        }
        stage('approval') {
            steps {
                input "Please review the Terraform plan and click 'Proceed' to apply it"
            }
        }
        stage('apply') {
            steps {
                unstash 'terraform-plan'
                sh 'terraform apply -auto-approve tfplan'
            }
        }
        stage('approve destroy') {
            steps {
                input "Please review the Terraform plan and click 'Proceed' to destroy it"
            }
        }
        stage('destroy') {
            steps {
                unstash 'terraform-plan'
                sh 'terraform destroy --auto-approve'
            }
        }
    }
}
